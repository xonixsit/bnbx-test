{"ast":null,"code":"import { environment } from 'src/environments/environment.staging';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthServicesService = /*#__PURE__*/(() => {\n  class AuthServicesService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}`; // Adjust the endpoint according to your API\n      this.apiUrls = 'https://fcsapi.com/api-v3/forex/profile?symbol=XAU/USD&access_key=OFMirVmCdgfldHkJ3V1i';\n      this.apiurslss = \"https://fcsapi.com/api-v3/forex/latest?symbol=XAU/USD&access_key=OFMirVmCdgfldHkJ3V1i\";\n    }\n    // Method to sign up a user\n    signUp(userData) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(`${this.apiUrl}/user/auth/register`, userData, {\n        headers\n      });\n    }\n    // Method to sign up a user\n    login(userData) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(`${this.apiUrl}/admin/auth/login`, userData, {\n        headers\n      });\n    }\n    forgotPassword(body, token) {\n      const headers = new HttpHeaders({\n        'Authorization': token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      return this.http.put(`${this.apiUrl}/user/auth/change/password`, {\n        body\n      }, {\n        headers\n      });\n    }\n    // Method to send OTP to email\n    sendEmailOtp(email, mobile) {\n      const body = {\n        email,\n        mobile\n      };\n      return this.http.post(`${this.apiUrl}/user/auth/send/otp`, body);\n    }\n    getReferralInfo(referralCode) {\n      const params = new HttpParams().set('referralCode', referralCode);\n      return this.http.get(`${this.apiUrl}/user/auth/referral/info`, {\n        params\n      });\n    }\n    // Method to verify OTP\n    mobileVerifyOtp(mobile, otp) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      body.set('mobile', mobile);\n      body.set('otp', otp);\n      return this.http.patch(`${this.apiUrl}/user/auth/verify/otp`, body.toString(), {\n        headers\n      });\n    }\n    // Method to verify OTP\n    emailVerifyOtp(email, otp) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      // body.set('mobile', mobile);\n      body.set('email', email);\n      body.set('otp', otp);\n      return this.http.patch(`${this.apiUrl}/user/auth/verify/otp`, body.toString(), {\n        headers\n      });\n    }\n    getProfile(token) {\n      const headers = new HttpHeaders({\n        Authorization: token\n      });\n      return this.http.get(`${this.apiUrl}/admin/dashboard`, {\n        headers\n      });\n    }\n    // Method to sign up a user\n    updateProfile(token, updatedData) {\n      const headers = new HttpHeaders({\n        'Authorization': token,\n        'Content-Type': 'application/json'\n      });\n      return this.http.put(`${this.apiUrl}/user/profile/update`, updatedData, {\n        headers\n      });\n    }\n    getReferralTree(token) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.apiUrl}/user/profile/referral/tree`, {\n        headers\n      });\n    }\n    getReferralInfomation(referralCode, token) {\n      const headers = new HttpHeaders({\n        Authorization: token\n      });\n      return this.http.get(`${this.apiUrl}/user/profile/referral/info?referralCode=${referralCode}`, {\n        headers\n      });\n    }\n    getLatestForexDetails() {\n      return this.http.get(this.apiUrls);\n    }\n    getLatestForexLatest() {\n      return this.http.get(this.apiurslss);\n    }\n    toggleLoader(show) {\n      const loader = document.getElementById('loader');\n      if (loader) {\n        loader.style.display = show ? 'flex' : 'none';\n      }\n    }\n    static {\n      this.ɵfac = function AuthServicesService_Factory(t) {\n        return new (t || AuthServicesService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthServicesService,\n        factory: AuthServicesService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthServicesService;\n})();\nexport { AuthServicesService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}