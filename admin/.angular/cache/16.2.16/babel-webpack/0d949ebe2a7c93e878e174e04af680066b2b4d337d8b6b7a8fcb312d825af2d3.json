{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment.staging';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet UserServicesService = /*#__PURE__*/(() => {\n  class UserServicesService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = `${environment.apiUrl}`; // Adjust to your API endpoint\n    }\n    // getTransactions(page: number, size: number , token:any): Observable<any[]> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': token // Replace with your actual token\n    //   });\n    //   return this.http.get<any[]>(`${this.baseUrl}/user/wallet?page=${page}&sizePerPage=${size}`, { headers });\n    // }\n    getUserList(page, size, token, params) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.baseUrl}/admin/user/list`, {\n        headers,\n        params\n      });\n    }\n    getReferralInfomation(referralCode, token, userId) {\n      const headers = new HttpHeaders({\n        Authorization: token\n      });\n      let url = `${this.baseUrl}/admin/user/details?referralCode=${referralCode}`;\n      if (userId) {\n        url += `&userId=${userId}`;\n      }\n      console.log(url);\n      return this.http.get(url, {\n        headers\n      });\n    }\n    getReferralList(token, id) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.baseUrl}/admin/user/referral/tree?userId=${id}`, {\n        headers\n      });\n    }\n    getUserDataWithId(token, id) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.baseUrl}/admin/user/${id}`, {\n        headers\n      });\n    }\n    // Method to sign up a user\n    updateProfile(updatedData, token) {\n      const headers = new HttpHeaders({\n        Authorization: token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      Object.keys(updatedData).forEach(key => {\n        body.set(key, updatedData[key]);\n      });\n      return this.http.put(`${this.baseUrl}/admin/user/update`, body, {\n        headers\n      }).pipe(catchError(error => {\n        console.error('Error:', error.error.message || 'Unknown error');\n        return throwError(() => error);\n      }));\n      ;\n    }\n    // Method to sign up a user\n    fundDpositeTransaction(updatedData, token) {\n      const headers = new HttpHeaders({\n        Authorization: token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      Object.keys(updatedData).forEach(key => {\n        body.set(key, updatedData[key]);\n      });\n      return this.http.post(`${this.baseUrl}/admin/transaction/deposit/usdt`, body, {\n        headers\n      }).pipe(catchError(error => {\n        console.error('Error:', error.error.message || 'Unknown error');\n        return throwError(() => error);\n      }));\n      ;\n    }\n    changeTranxPawword(data, token) {\n      // Set headers with Authorization token\n      const headers = new HttpHeaders({\n        Authorization: token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      // Format the request body as x-www-form-urlencoded\n      const body = new URLSearchParams();\n      body.set('userId', data.userId);\n      body.set('password', data.password);\n      // Send the PUT request\n      return this.http.put(`${this.baseUrl}/admin/user/change/trx/password`, body.toString(), {\n        headers,\n        observe: 'response'\n      });\n    }\n    // changeTranxPawword(body: any,  token: string): Observable<any> {\n    //   const headers = new HttpHeaders({'Authorization': token , 'Content-Type': 'application/json' });\n    //   return this.http.post(`${this.baseUrl}/admin/user/change/trx/password`, body, { headers, observe: 'response' })\n    //     .pipe(\n    //       catchError(this.handleError) // Handle error gracefully\n    //     );\n    // }\n    changeLoginPassword(body, token) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.put(`${this.baseUrl}/admin/user/change/login/password`, body, {\n        headers,\n        observe: 'response'\n      }).pipe(catchError(this.handleError) // Handle error gracefully\n      );\n    }\n\n    handleError(error) {\n      console.error('An error occurred:', error);\n      return throwError(error);\n    }\n    toggleLoader(show) {\n      const loader = document.getElementById('loader');\n      if (loader) {\n        loader.style.display = show ? 'flex' : 'none';\n      }\n    }\n    static {\n      this.ɵfac = function UserServicesService_Factory(t) {\n        return new (t || UserServicesService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserServicesService,\n        factory: UserServicesService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserServicesService;\n})();\nexport { UserServicesService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}