{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.staging';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet TransactionServicesService = /*#__PURE__*/(() => {\n  class TransactionServicesService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = `${environment.apiUrl}`; // Adjust to your API endpoint\n    }\n\n    getTransactions(page, size, token, params) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.baseUrl}/admin/transaction/list`, {\n        headers,\n        params\n      });\n    }\n    getTransactionsById(token, params) {\n      const headers = new HttpHeaders({\n        Authorization: token\n      });\n      return this.http.get(`${this.baseUrl}/admin/transaction/list`, {\n        headers,\n        params\n      });\n    }\n    verifyDeposit(transactionId, status, token) {\n      const headers = new HttpHeaders({\n        'Authorization': token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      body.set('transactionId', transactionId);\n      body.set('status', status); // 'COMPLETED' or 'REJECTED'\n      return this.http.post(`${this.baseUrl}/admin/transaction/verify/deposit`, body.toString(), {\n        headers,\n        observe: 'response'\n      });\n    }\n    verifyWidthdraw(transactionId, status, token) {\n      const headers = new HttpHeaders({\n        'Authorization': token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      const body = new URLSearchParams();\n      body.set('transactionId', transactionId);\n      body.set('status', status); // 'COMPLETED' or 'REJECTED'\n      return this.http.post(`${this.baseUrl}/admin/transaction/verify/withdraw`, body.toString(), {\n        headers,\n        observe: 'response'\n      });\n    }\n    toggleLoader(show) {\n      const loader = document.getElementById('loader');\n      if (loader) {\n        loader.style.display = show ? 'flex' : 'none';\n      }\n    }\n    static {\n      this.ɵfac = function TransactionServicesService_Factory(t) {\n        return new (t || TransactionServicesService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TransactionServicesService,\n        factory: TransactionServicesService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TransactionServicesService;\n})();\nexport { TransactionServicesService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}